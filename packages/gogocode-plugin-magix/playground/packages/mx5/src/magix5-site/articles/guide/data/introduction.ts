const data = `
<h2 >简介</h2>
<h3 >什么是magix</h3>
<p>随着前端领域的不断发展，现代的网站变得越来越庞大，页面变得越来越复杂。在这个情况下，<code>Magix</code>以<strong>将站点分离为一个个页面，将页面分离成一个个区块</strong>的思想，用<strong>区块连接</strong>的方式使用一个个相互独立的区块来构建页面，让无论多复杂的页面都能像拼拼图一样，实现化繁为简。</p>
<ul>
<li>简单易用：采用最原汁原味的语法，只要掌握<code>html</code>、<code>css</code>、<code>javascript</code>即可开箱即用</li>
<li>高效率：区块之间相互独立，意味着在任何地方都可复用定义好的区块，让工作事半功倍</li>
<li>面向未来：针对复杂庞大的项目时，Magix天然的微前端架构，经过简单配置，让独立的项目也如区块一般顺滑接入</li>

</ul>
<h3 >magix适合什么项目</h3>
<ul>
<li><code>Magix</code>适合做单页应用(<code>SPA</code>)的项目，最初的设计目标也是做单页应用的</li>

</ul>
<ul>
<li><code>Magix</code>也可以做传统的展示型页面，当页面越复杂时，用<code>Magix</code>越值得</li>

</ul>
<ul>
<li>也可以只把页面上某一块应用<code>Magix</code>，不要求是整个页面</li>

</ul>
<p><code>Magix</code>不支持多个实例，即同一个页面只能有一个<code>Magix</code>存在。即使如此，<code>Magix</code>仍然可以与别的框架混用。甚至页面上某几块想用<code>Magix</code>的功能也是可以的，<code>Magix</code>具有高自由度和可拓展性</p>
<h3 >概念</h3>
<h4 >区块</h4>
<p>在<code>magix</code>中我们将区块的概念具象为<code>View</code>，每一个<code>View</code>之间都是相互独立的，会根据数据来动态进行页面的展示，我们可以使用区块之间的组合、连接以及嵌套来进行页面的构建实现。</p>
<h4 >路由</h4>
<p>我们可以通过路由的配置使不同的地址对应不同的区块，并且可以通过路由来进行区块之间的参数传递以及动态渲染。</p>
<h4 >接口管理</h4>
<p>当应用变得复杂时，通常会有很多获取数据的接口，同一个区块可以组合使用好几个接口，如何自由的组装使用这些接口变得重要。同时一个接口可能会用在很多地方，也就是不同的区块里，随着迭代升级，如何保证接口不被漏改也变得重要。<code>Magix</code>提供接口管理<code>Service</code>模块，重点解决这些问题。集中在一个地方向整个应用提供接口服务，同时也可以很方便的<strong>缓存</strong>这些请求接口，比如用户信息接口之类的，不用反复请求。</p>
<h4 >天然的微前端方案</h4>
<p><code>Magix</code>有着天然的微前端优势，我们可以将子项目当作区块一般顺滑接入。</p>
<p>当完全不同项目之间有着高相似度的页面时，我们就可以将其抽离维护为独立的项目，然后再如导入区块一般将子项目导入到宿主项目之中，这实现了项目级别的复用。当子项目需要进行功能迭代时，只需对子项目进行开发，对宿主无任何影响。</p>
<p>当需要在同一个项目中使用多个技术栈，或者兼容旧版本时，<code>Magix</code>也能够轻松应对</p>


`;
export default data;
